% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper_functions.R
\name{fosr_predict}
\alias{fosr_predict}
\title{We have that
  Y_i(t) = sum(x_{ij} * alpha_tilde_j(t)) +
           gamma_tilde_i(t) +
           eps_i(t)
This function tries to return the three components above for a new input dataset X.}
\usage{
fosr_predict(
  X,
  post_fk,
  post_alpha,
  post_sigma_delta_k = NULL,
  post_nu = NULL,
  post_sigma_e = NULL
)
}
\arguments{
\item{X}{a new input dataset to predict from}

\item{post_fk}{mcmc samples from param fk}

\item{post_alpha}{mcmc samples from param alpha}

\item{post_sigma_delta_k}{mcmc samples from param sigma_delta_k}

\item{post_nu}{mcmc samples from param nu}

\item{post_sigma_e}{mcmc samples from param sigma_e}
}
\value{
a list containing the following:
\itemize{
\item \code{mean}: the posterior mean; the first term
\item \code{gammaTilde}: the predictive random effects term; the second term
\item \code{epsOut}: white noise of the right shape simulated from sigma_e
}
}
\description{
To get gamma_tilde, \gamma_{k,i} is simulated from it's predictive distribution
using post_sigma_delta_k and post_nu. If post_sigma_delta_k is not provided, it is not sampled.
}
\details{
eps_i is just white noise with standard deviations from post_sigma_e. If post_sigma_e
is not provded, it is not sampled.
}
\note{

}
\examples{
library(fosr)

# Simulate some data:
n = 100
m = 20
p_0 = 100
p_1 = 5
sim_data  = simulate_fosr(n = n, m = m, p_0 = p_0, p_1 = p_1)
sim_data2 = simulate_fosr(n = n, m = m, p_0 = p_0, p_1 = p_1)

# Data:
Y = sim_data$Y
X = sim_data$X
X2 = sim_data2$X
tau = sim_data$tau

# Dimensions:
n = nrow(Y)
m = ncol(Y)
p = ncol(X)

# Run the FOSR:
out = fosr(
  Y = Y,
  tau = tau,
  X = X,
  K = 6,
  mcmc_params = list("fk", "alpha", "Yhat", "sigma_e", "sigma_g", "sigma_delta_k", "nu"))

YPredictInfo = fosr_predict(X, out$fk, out$alpha, out$sigma_delta_k, out$nu, out$sigma_e)

i = sample(1:n, 1)

YPredict = YPredictInfo$mean + YPredictInfo$gammaTilde

plot_fitted(y = sim_data$Y[i,], mu = colMeans(YPredictInfo$mean[,i,]),
            postY = YPredict[,i,], y_true = sim_data$Y_true[i,], t01 = sim_data$tau)


}
